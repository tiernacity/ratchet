name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: ''

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Read Go version
      run: |
        source .github/workflows/go-version.env
        echo "GO_VERSION=$GO_VERSION" >> $GITHUB_ENV
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
    
    - name: Verify Go version consistency
      run: |
        GO_MOD_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | awk '{print $2}')
        if [ "$GO_MOD_VERSION" != "$GO_VERSION" ]; then
          echo "ERROR: go.mod version ($GO_MOD_VERSION) doesn't match go-version.env ($GO_VERSION)"
          echo "Please update go.mod to use: go $GO_VERSION"
          exit 1
        fi
        echo "âœ“ Go versions are consistent: $GO_VERSION"
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run gofmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted:"
          gofmt -d .
          exit 1
        fi
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Read Go version
      run: |
        source .github/workflows/go-version.env
        echo "GO_VERSION=$GO_VERSION" >> $GITHUB_ENV
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  test-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary_name: ratchet
          - os: macos-latest
            binary_name: ratchet
          - os: windows-latest
            binary_name: ratchet.exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Read Go version
      run: |
        source .github/workflows/go-version.env
        echo "GO_VERSION=$GO_VERSION" >> $GITHUB_ENV
      shell: bash
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build
      run: go build -o bin/${{ matrix.binary_name }} ./cmd/ratchet
    
    - name: Test binary
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          ./bin/${{ matrix.binary_name }} --version
        else
          ./bin/${{ matrix.binary_name }} --version
        fi
      shell: bash